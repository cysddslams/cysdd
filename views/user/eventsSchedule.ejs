<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tournament Schedule - <%= event.title %></title>
    <link rel="stylesheet" href="/styles/frontpage.css">
    <link rel="stylesheet" href="/styles/userEvents.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* RESET and ISOLATION - Prevent userEvents.css conflicts */
        .schedule-isolated-page {
            all: initial;
            font-family: 'Poppins', sans-serif;
            background: #f8fafc;
        }
        
        .schedule-isolated-page * {
            box-sizing: border-box;
        }

        /* Main container */
        .schedule-main-container {
            padding: 30px 20px;
            max-width: 1200px;
            margin: 80px auto 0 auto;
            min-height: calc(100vh - 80px);
            background: transparent;
        }

        /* Page Header */
        .schedule-page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 40px;
            padding: 0 10px;
        }

        .schedule-title-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .schedule-title-icon {
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, #007bff, #0056b3);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
            box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
        }

        .schedule-title-text {
            font-size: 2.5rem;
            font-weight: 700;
            background: linear-gradient(135deg, #007bff, #0056b3);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin: 0;
        }

        .schedule-back-btn {
            background: linear-gradient(135deg, #6c757d, #495057);
            color: white;
            padding: 12px 25px;
            border-radius: 10px;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 10px;
            transition: all 0.3s ease;
            font-weight: 500;
            box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);
            border: none;
            cursor: pointer;
            font-size: 1rem;
        }

        .schedule-back-btn:hover {
            background: linear-gradient(135deg, #495057, #343a40);
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(108, 117, 125, 0.4);
        }

        /* Event Hero Section */
        .schedule-event-hero {
            background: linear-gradient(135deg, #007bff, #0056b3);
            color: white;
            padding: 40px;
            border-radius: 20px;
            margin-bottom: 40px;
            box-shadow: 0 8px 30px rgba(0, 123, 255, 0.2);
            position: relative;
            overflow: hidden;
        }

        .schedule-event-hero::before {
            content: '';
            position: absolute;
            top: -50%;
            right: -50%;
            width: 100%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
            transform: rotate(45deg);
        }

        .schedule-event-hero h1 {
            margin: 0 0 15px 0;
            font-size: 2.5rem;
            font-weight: 700;
            position: relative;
        }

        .schedule-event-description {
            font-size: 1.1rem;
            opacity: 0.9;
            margin: 0 0 25px 0;
            line-height: 1.6;
        }

        .schedule-event-meta {
            display: flex;
            gap: 30px;
            flex-wrap: wrap;
            position: relative;
        }

        .schedule-meta-item {
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 1rem;
            background: rgba(255, 255, 255, 0.1);
            padding: 10px 20px;
            border-radius: 10px;
            backdrop-filter: blur(10px);
        }

        .schedule-meta-item i {
            font-size: 1.2rem;
        }

        /* Sports Navigation */
        .schedule-sports-nav {
            margin-bottom: 30px;
        }

        .schedule-sports-tabs {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-bottom: 20px;
        }

        .sport-tab {
            background: white;
            padding: 15px 25px;
            border-radius: 10px;
            cursor: pointer;
            border: 2px solid #e9ecef;
            transition: all 0.3s ease;
            font-weight: 600;
            color: #495057;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }

        .sport-tab:hover {
            border-color: #007bff;
            transform: translateY(-2px);
        }

        .sport-tab.active {
            background: #007bff;
            color: white;
            border-color: #007bff;
            box-shadow: 0 4px 15px rgba(0,123,255,0.3);
        }

        /* Match Schedule List - NEW STYLING */
        .schedule-matches-section {
            margin-top: 30px;
        }

        .schedule-bracket-header {
            background: linear-gradient(135deg, #28a745, #1e7e34);
            color: white;
            padding: 25px 30px;
            border-radius: 15px;
            margin-bottom: 25px;
            box-shadow: 0 6px 20px rgba(40, 167, 69, 0.3);
        }

        .schedule-bracket-header h3 {
            margin: 0 0 15px 0;
            font-size: 1.8rem;
            font-weight: 600;
            text-align: center;
        }

        .bracket-meta {
            display: flex;
            justify-content: center;
            gap: 20px;
            flex-wrap: wrap;
            font-size: 1rem;
        }

        .bracket-meta-item {
            display: flex;
            align-items: center;
            gap: 8px;
            background: rgba(255,255,255,0.2);
            padding: 8px 15px;
            border-radius: 20px;
        }

        /* Match List Styling */
        .matches-list {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .round-section {
            margin-bottom: 30px;
        }

        .round-header {
            background: linear-gradient(135deg, #007bff, #0056b3);
            color: white;
            padding: 18px 25px;
            border-radius: 12px;
            margin-bottom: 20px;
            font-weight: 600;
            font-size: 1.3rem;
            box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .match-item {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
            border: 2px solid #e8ecef;
            border-left: 6px solid #007bff;
            transition: all 0.3s ease;
        }

        .match-item:hover {
            box-shadow: 0 6px 25px rgba(0, 0, 0, 0.12);
            transform: translateY(-3px);
        }

        .teams-display {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 20px;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border-radius: 10px;
            border: 1px solid #dee2e6;
        }

        .team {
            flex: 1;
            text-align: center;
            padding: 15px 20px;
            font-weight: 700;
            color: #2c3e50;
            font-size: 1.3rem;
            border-radius: 8px;
            background: white;
            border: 2px solid #e9ecef;
        }

        .user-team {
            background: linear-gradient(135deg, #e3f2fd, #bbdefb);
            border: 3px solid #007bff;
            color: #007bff;
            box-shadow: 0 4px 15px rgba(0, 123, 255, 0.2);
        }

        .vs {
            margin: 0 25px;
            font-weight: bold;
            color: #495057;
            background: white;
            padding: 10px 20px;
            border-radius: 25px;
            border: 2px solid #dee2e6;
            font-size: 1.1rem;
            font-weight: 800;
        }

        .match-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin: 15px 0;
        }

        .detail-card {
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid;
            display: flex;
            align-items: center;
            gap: 10px;
            font-weight: 500;
        }

        .date-time-card {
            background: #e8f5e8;
            border-left-color: #4caf50;
        }

        .venue-card {
            background: #e3f2fd;
            border-left-color: #2196f3;
        }

        .winner-card {
            background: #d4edda;
            border-left-color: #28a745;
        }

        .match-meta {
            display: flex;
            gap: 15px;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #e9ecef;
            color: #6c757d;
            font-size: 0.9rem;
        }

        .match-meta-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        /* Empty State */
        .schedule-no-matches {
            text-align: center;
            padding: 60px 40px;
            color: #6c757d;
            background: white;
            border-radius: 20px;
            box-shadow: 0 6px 25px rgba(0, 0, 0, 0.08);
            margin: 20px 0;
        }

        .schedule-no-matches i {
            font-size: 4rem;
            margin-bottom: 20px;
            color: #dee2e6;
            opacity: 0.7;
        }

        .schedule-no-matches h3 {
            color: #495057;
            margin-bottom: 15px;
            font-size: 1.6rem;
            font-weight: 600;
        }

        /* OVERRIDE userEvents.css conflicts */
        .schedule-isolated-page .dashboard-container {
            margin-top: 0 !important;
            margin-left: 0 !important;
            padding: 0 !important;
            background: transparent !important;
        }

        .schedule-isolated-page .page-title {
            margin-left: 0 !important;
            border-bottom: none !important;
            padding-bottom: 0 !important;
            color: #333 !important;
        }

        .schedule-isolated-page .events-list,
        .schedule-isolated-page .event-item {
            display: none !important;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .teams-display {
                flex-direction: column;
                gap: 15px;
            }
            
            .vs {
                margin: 0;
                order: -1;
            }
            
            .match-details {
                grid-template-columns: 1fr;
            }
            
            .bracket-meta {
                flex-direction: column;
                align-items: center;
                gap: 10px;
            }
            
            .schedule-sports-tabs {
                justify-content: center;
            }
        }
    </style>
</head>
<body class="schedule-isolated-page">
    <header class="header">
        <div class="logo">
            <a href="/homepage" style="text-decoration: none;">
                <img src="/images/cityYouth.jpg" alt="SLAMS Logo">
            </a>
            <span class="slams-title">SLAMS</span>
        </div>

        <div class="user-profile">
            <% if (user.profile) { %>
                <img src="<%= user.profile %>" alt="Profile" style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover; border: 2px solid #fff; cursor: pointer;">
            <% } else { %>
                <i class="fas fa-user-shield" style="font-size: 24px; cursor: pointer;"></i>
            <% } %>
        </div>
    </header>

    <!-- Main content wrapper -->
    <div class="schedule-main-container">
        <!-- Page Header -->
        <div class="schedule-page-header">
            <div class="schedule-title-section">
                <div class="schedule-title-icon">
                    <i class="fas fa-calendar-day"></i>
                </div>
                <h1 class="schedule-title-text">Tournament Schedules</h1>
            </div>
            <a href="/events" class="schedule-back-btn">
                <i class="fas fa-arrow-left"></i> Back to Events
            </a>
        </div>

        <!-- Event Hero Section -->
        <div class="schedule-event-hero">
            <h1><%= event.title %></h1>
            <% if (event.description) { %>
                <p class="schedule-event-description"><%= event.description %></p>
            <% } %>
            <div class="schedule-event-meta">
                <div class="schedule-meta-item">
                    <i class="fas fa-calendar-alt"></i>
                    <%= new Date(event.date_schedule).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) %>
                </div>
                <div class="schedule-meta-item">
                    <i class="fas fa-clock"></i>
                    <%= new Date(event.date_schedule).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %>
                </div>
                <div class="schedule-meta-item">
                    <i class="fas fa-map-marker-alt"></i>
                    <%= event.location %>
                </div>
            </div>
        </div>

        <!-- Loading Animation -->
        <div id="scheduleLoading" class="schedule-loading" style="display: none; text-align: center; padding: 40px;">
            <div style="width: 50px; height: 50px; border: 5px solid #f3f3f3; border-top: 5px solid #007bff; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 20px auto;"></div>
            <p>Loading tournament data...</p>
        </div>

        <!-- Sports Navigation -->
        <section class="schedule-sports-nav" id="sportsNav" style="display: none;">
            <h3 style="color: #2c3e50; font-size: 1.8rem; margin-bottom: 20px; display: flex; align-items: center; gap: 12px;">
                <i class="fas fa-basketball-ball"></i> Select Sport
            </h3>
            <div class="schedule-sports-tabs" id="sportsTabs">
                <!-- Sports tabs will be loaded here -->
            </div>
        </section>

        <!-- Matches Section - ALWAYS VISIBLE NOW -->
        <section class="schedule-matches-section" id="matchesSection">
            <div id="matchesContainer">
                <!-- Matches will be loaded here automatically -->
            </div>
        </section>
    </div>

    <script>
    // Load all matches automatically when page loads
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Page loaded, starting to load matches...');
        loadAllMatches();
    });

    async function loadAllMatches() {
        try {
            console.log('Starting to load all matches...');
            
            // Show loading
            document.getElementById('scheduleLoading').style.display = 'block';
            
            // Get data from EJS template
            const eventId = '<%= event.id %>';
            const brackets = <%= JSON.stringify(brackets || []) %>;
            const userTeams = <%= JSON.stringify(userTeams || []) %>;

            console.log('Event ID:', eventId);
            console.log('Brackets data:', brackets);
            console.log('User teams:', userTeams);

            if (!brackets || brackets.length === 0) {
                console.log('No brackets found for this event');
                showNoMatchesMessage('No tournament brackets have been created for this event yet.');
                document.getElementById('scheduleLoading').style.display = 'none';
                return;
            }

            // Load matches for all brackets
            let allMatches = [];
            let bracketsWithData = [];

            for (const bracket of brackets) {
                try {
                    console.log(`Loading matches for bracket: ${bracket.id} - ${bracket.sport_type}`);
                    
                    const response = await fetch(`/event-schedule/bracket/${bracket.id}/matches`);
                    
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    
                    const data = await response.json();
                    console.log(`Bracket ${bracket.id} matches response:`, data);
                    
                    if (data.success && data.matches && data.matches.length > 0) {
                        // Add bracket info to each match
                        data.matches.forEach(match => {
                            match.bracket_info = data.bracket;
                            match.bracket_id = bracket.id;
                        });
                        allMatches = allMatches.concat(data.matches);
                        bracketsWithData.push(bracket);
                        console.log(`Added ${data.matches.length} matches from bracket ${bracket.id}`);
                    } else {
                        console.log(`No matches found for bracket ${bracket.id} or API returned error:`, data.error);
                    }
                } catch (error) {
                    console.error(`Error loading matches for bracket ${bracket.id}:`, error);
                }
            }

            // Hide loading
            document.getElementById('scheduleLoading').style.display = 'none';

            console.log('Total matches loaded:', allMatches.length);
            console.log('Brackets with data:', bracketsWithData.length);

            if (allMatches.length === 0) {
                showNoMatchesMessage('Matches have been created but no schedule information is available yet.');
            } else {
                displayAllMatches(allMatches, bracketsWithData, userTeams);
            }

        } catch (error) {
            console.error('Error loading matches:', error);
            document.getElementById('scheduleLoading').style.display = 'none';
            showNoMatchesMessage('Error loading match schedules. Please try again later.');
        }
    }

    function displayAllMatches(matches, brackets, userTeams) {
        const matchesContainer = document.getElementById('matchesContainer');
        matchesContainer.innerHTML = '';

        console.log('Displaying matches:', matches);
        console.log('Displaying brackets:', brackets);

        // Group matches by bracket and then by round
        const bracketsWithMatches = {};
        
        brackets.forEach(bracket => {
            const bracketMatches = matches.filter(match => match.bracket_id === bracket.id);
            if (bracketMatches.length > 0) {
                bracketsWithMatches[bracket.id] = {
                    bracket: bracket,
                    matches: bracketMatches
                };
            }
        });

        console.log('Brackets with matches:', Object.keys(bracketsWithMatches).length);

        if (Object.keys(bracketsWithMatches).length === 0) {
            showNoMatchesMessage('No scheduled matches found for this event.');
            return;
        }

        // Display matches for each bracket
        Object.values(bracketsWithMatches).forEach(({ bracket, matches }) => {
            const bracketSection = document.createElement('div');
            bracketSection.className = 'bracket-section';
            
            // Bracket header
            bracketSection.innerHTML = `
                <div class="schedule-bracket-header">
                    <h3>${bracket.sport_type}</h3>
                    <div class="bracket-meta">
                        <div class="bracket-meta-item">
                            <i class="fas fa-chess-board"></i>
                            ${bracket.bracket_type.replace('_', ' ').toUpperCase()} Tournament
                        </div>
                        <div class="bracket-meta-item">
                            <i class="fas fa-flag"></i>
                            Status: ${bracket.is_completed ? 'Completed' : 'In Progress'} | Round: ${bracket.current_round || 1}
                        </div>
                    </div>
                </div>
            `;

            // Group matches by round
            const rounds = {};
            matches.forEach(match => {
                if (!rounds[match.round_number]) rounds[match.round_number] = [];
                rounds[match.round_number].push(match);
            });

            const matchesList = document.createElement('div');
            matchesList.className = 'matches-list';

            // Sort rounds numerically and display
            Object.keys(rounds).sort((a, b) => a - b).forEach(roundNumber => {
                const roundSection = document.createElement('div');
                roundSection.className = 'round-section';
                
                roundSection.innerHTML = `
                    <div class="round-header">
                        <i class="fas fa-flag"></i> 
                        Round ${roundNumber}
                        <span style="font-size: 0.9rem; opacity: 0.9; margin-left: auto;">
                            ${rounds[roundNumber].length} match${rounds[roundNumber].length !== 1 ? 'es' : ''}
                        </span>
                    </div>
                `;

                rounds[roundNumber].forEach(match => {
                    const isUserTeam1 = userTeams.some(team => team.id === match.team1_id);
                    const isUserTeam2 = userTeams.some(team => team.id === match.team2_id);

                    console.log('Processing match:', match);
                    console.log('Team 1:', match.team1_name, 'Team 2:', match.team2_name);
                    console.log('Match date:', match.match_date);
                    console.log('Venue:', match.venue);

                    // Format date and time
                    let dateTimeInfo = '';
                    if (match.match_date) {
                        const matchDate = new Date(match.match_date);
                        dateTimeInfo = `
                            <div class="detail-card date-time-card">
                                <i class="fas fa-calendar-alt" style="color: #4caf50;"></i>
                                <div>
                                    <strong>${matchDate.toLocaleDateString('en-US', { 
                                        month: '2-digit', 
                                        day: '2-digit', 
                                        year: 'numeric' 
                                    })}</strong>
                                    <br>
                                    <span>${matchDate.toLocaleTimeString('en-US', { 
                                        hour: '2-digit', 
                                        minute: '2-digit',
                                        hour12: true
                                    })}</span>
                                </div>
                            </div>
                        `;
                    } else {
                        dateTimeInfo = `
                            <div class="detail-card date-time-card">
                                <i class="fas fa-calendar-times" style="color: #6c757d;"></i>
                                <div>
                                    <strong>Date & Time</strong>
                                    <br>
                                    <span>Not yet scheduled</span>
                                </div>
                            </div>
                        `;
                    }

                    // Venue information
                    let venueInfo = '';
                    if (match.venue) {
                        venueInfo = `
                            <div class="detail-card venue-card">
                                <i class="fas fa-map-marker-alt" style="color: #2196f3;"></i>
                                <div>
                                    <strong>Venue</strong>
                                    <br>
                                    <span>${match.venue}</span>
                                </div>
                            </div>
                        `;
                    } else {
                        venueInfo = `
                            <div class="detail-card venue-card">
                                <i class="fas fa-map-marker-alt" style="color: #6c757d;"></i>
                                <div>
                                    <strong>Venue</strong>
                                    <br>
                                    <span>To be announced</span>
                                </div>
                            </div>
                        `;
                    }

                    // Winner information
                    let winnerInfo = '';
                    if (match.status === 'completed' && match.winner_name) {
                        const scoreDisplay = match.team1_score !== null ? `(${match.team1_score}-${match.team2_score})` : '';
                        winnerInfo = `
                            <div class="detail-card winner-card">
                                <i class="fas fa-trophy" style="color: #ffd700;"></i>
                                <div>
                                    <strong>Winner</strong>
                                    <br>
                                    <span>${match.winner_name} ${scoreDisplay}</span>
                                </div>
                            </div>
                        `;
                    }

                    const matchItem = document.createElement('div');
                    matchItem.className = 'match-item';
                    matchItem.innerHTML = `
                        <div class="teams-display">
                            <div class="team ${isUserTeam1 ? 'user-team' : ''}">
                                ${match.team1_name || 'TBD'}
                                ${isUserTeam1 ? '<br><small style="color: #007bff;">(Your Team)</small>' : ''}
                            </div>
                            <div class="vs">VS</div>
                            <div class="team ${isUserTeam2 ? 'user-team' : ''}">
                                ${match.team2_name || 'TBD'}
                                ${isUserTeam2 ? '<br><small style="color: #007bff;">(Your Team)</small>' : ''}
                            </div>
                        </div>
                        
                        <div class="match-details">
                            ${dateTimeInfo}
                            ${venueInfo}
                            ${winnerInfo}
                        </div>
                        
                        <div class="match-meta">
                            <div class="match-meta-item">
                                <i class="fas fa-hashtag"></i>
                                Match #${match.match_number || 'N/A'}
                            </div>
                            <div class="match-meta-item">
                                <i class="fas fa-flag"></i>
                                Round ${match.round_number}
                            </div>
                            <div class="match-meta-item" style="margin-left: auto;">
                                <i class="fas fa-info-circle"></i>
                                <span style="text-transform: capitalize;">${match.status.replace('_', ' ')}</span>
                            </div>
                        </div>
                    `;

                    roundSection.appendChild(matchItem);
                });

                matchesList.appendChild(roundSection);
            });

            bracketSection.appendChild(matchesList);
            matchesContainer.appendChild(bracketSection);
        });
    }

    function showNoMatchesMessage(message = 'No match schedules available yet.') {
        const matchesContainer = document.getElementById('matchesContainer');
        matchesContainer.innerHTML = `
            <div class="schedule-no-matches">
                <i class="far fa-calendar-times"></i>
                <h3>No Match Schedules Available</h3>
                <p>${message}</p>
                <p>Check back later for tournament schedules.</p>
            </div>
        `;
    }

    // Add a simple retry button
    function addRetryButton() {
        const matchesContainer = document.getElementById('matchesContainer');
        const retryButton = document.createElement('button');
        retryButton.textContent = 'Retry Loading Matches';
        retryButton.className = 'schedule-back-btn';
        retryButton.style.marginTop = '20px';
        retryButton.onclick = loadAllMatches;
        matchesContainer.appendChild(retryButton);
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</script>
</body>
</html>

